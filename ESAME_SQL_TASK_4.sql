DROP SCHEMA IF exists RIF_TOYSGROUP;

CREATE SCHEMA RIF_TOYSGROUP;

USE RIF_TOYSGROUP;

-- CREO TABELLA PER LE CATEGORIE;
CREATE TABLE CATEGORIE (
    CATEGORIE_ID INT PRIMARY KEY ,
    CATEGORIENOME VARCHAR(20) NOT NULL 
	);

-- CREO TABELLA PER I PRODOTTI;

CREATE TABLE PRODUCTS (
    PRODUCT_ID INT PRIMARY KEY ,
    PRODUCT_NAME VARCHAR(20) NOT NULL,
    CATEGORIE_ID INT NOT NULL,
    PRICE DECIMAL(7,2) NOT NULL,
    FOREIGN KEY (CATEGORIE_ID) REFERENCES CATEGORIE (CATEGORIE_ID)
);

-- CREO TABELLA PER LE REGIONI;
CREATE TABLE REGIONS (
    REGION_ID INT PRIMARY KEY ,
    REGION_NAME VARCHAR(20) NOT NULL
);

-- CREO TABELLA PER GLI STATI

CREATE TABLE COUNTRIES (
    COUNTRY_ID INT PRIMARY KEY  ,
    COUNTRY_NAME VARCHAR(20) NOT NULL ,
    REGION_ID INT NOT NULL ,
    FOREIGN KEY (REGION_ID) REFERENCES REGIONS(REGION_ID)
);

-- CREO TABELLE PER LE VENDITE

CREATE TABLE SALES (
    SALE_ID INT PRIMARY KEY ,
    PRODUCT_ID INT NOT NULL ,
    COUNTRY_ID INT NOT NULL ,
    DATE_SALE DATE,
    QUANTITY INT NOT NULL ,
    TOTAL DECIMAL(8, 2) NOT NULL ,
    FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID),
    FOREIGN KEY (COUNTRY_ID) REFERENCES COUNTRIES(COUNTRY_ID)
);

-- INSERIMENTO DATI TABELLE 

INSERT INTO CATEGORIE (CATEGORIE_ID, CATEGORIENOME) VALUES
(1, 'GIOCATTOLI_BAMBINO'),
(2, 'GIOCATTOLI_BAMBINA');

INSERT INTO PRODUCTS (PRODUCT_ID, PRODUCT_NAME, CATEGORIE_ID, PRICE) VALUES
(5012, 'PUZZLE-100', 1, 50),
(5013, 'PUZZLE-1000', 1, 150),
(6155, 'BAMBOLA-BARBIE', 2, 60),
(6156, 'PETTINE-BARBIE', 2, 10);

INSERT INTO REGIONS (REGION_ID, REGION_NAME) VALUES
(1, 'EUROPA'),
(2, 'AMERICA'),
(3, 'ASIA');

INSERT INTO COUNTRIES (COUNTRY_ID, COUNTRY_NAME , REGION_ID) VALUES
(1, 'ITALIA', 1),
(2, 'SPAGNA', 1),
(3, 'CALIFORNIA', 2),
(4, 'NEW YORK', 2),
(5, 'CINA', 3),
(6, 'GIAPPONE', 3);

INSERT INTO SALES (SALE_ID, DATE_SALE, PRODUCT_ID, COUNTRY_ID, QUANTITY, TOTAL) VALUES
(1, '2025-01-01', 5012, 1, 5, 250),
(2, '2024-08-17', 5012, 2, 2, 100),
(3, '2022-09-01', 6155, 3, 20, 1200),
(4, '2024-12-01', 6156, 4, 150, 1500);


-- VERIFICO UNIVOCITA' CAMPI PK

SELECT PRODUCT_ID, COUNT(*) AS Count FROM PRODUCTS GROUP BY PRODUCT_ID HAVING COUNT(*) > 1;

-- Per Region
SELECT REGION_ID, COUNT(*) AS Count FROM REGIONS GROUP BY REGION_ID HAVING COUNT(*) > 1;

-- Per State
SELECT COUNTRY_ID, COUNT(*) AS Count FROM COUNTRIES GROUP BY COUNTRY_ID HAVING COUNT(*) > 1;

-- Per Sales
SELECT SALE_ID, COUNT(*) AS Count FROM SALES GROUP BY SALE_ID HAVING COUNT(*) > 1;




-- 2




SELECT
    s.SALE_ID AS DocumentCode,
    s.DATE_SALE,
    p.PRODUCT_NAME,
    c.CATEGORIENOME,
    st.COUNTRY_NAME,
    r.REGION_NAME,
    CASE WHEN DATEDIFF(CURDATE(), s.DATE_SALE) > 180 THEN 1 ELSE 0 END AS MoreThan180Days
FROM
    Sales s
JOIN PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
JOIN CATEGORIE c ON p.CATEGORIE_ID = c.CATEGORIE_ID
JOIN COUNTRIES st ON s.COUNTRY_ID = st.COUNTRY_ID
JOIN REGIONS r ON st.REGION_ID = r.REGION_ID
LIMIT 0, 2000;




-- 3



WITH LASTYEARSALES AS (
    SELECT 
        PRODUCT_ID,
        SUM(QUANTITY) AS TOTALQUANTITY
    FROM 
        SALES
    WHERE 
        DATE_SALE >= DATE_ADD(CURDATE(), INTERVAL -1 YEAR)
    GROUP BY 
        PRODUCT_ID
),
AverageSales AS (
    SELECT 
        AVG(TOTALQUANTITY) AS AVERAGEQUANTITY 
    FROM 
        LASTYEARSALES
)
SELECT 
    l.PRODUCT_ID,
    l.TOTALQUANTITY
FROM 
    LASTYEARSALES l
CROSS JOIN 
    AVERAGESALES a
WHERE 
    l.TOTALQUANTITY > a.AVERAGEQUANTITY;





-- 4



SELECT 
    p.PRODUCT_ID,
    YEAR(s.DATE_SALE) AS SALEYEAR,
    SUM(s.TOTAL) AS TOTALREVENUE
FROM 
    SALES s
JOIN 
    PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
GROUP BY 
    p.PRODUCT_ID, YEAR(s.DATE_SALE)
LIMIT 0, 2000;



-- 5



SELECT 
    st.COUNTRY_NAME,
    YEAR(s.DATE_SALE) AS SALEYEAR,
    SUM(s.TOTAL) AS TOTALREVENUE
FROM 
    SALES s
JOIN COUNTRIES st ON s.COUNTRY_ID = st.COUNTRY_ID
GROUP BY 
    st.COUNTRY_NAME, YEAR(s.DATE_SALE)
ORDER BY 
    SALEYEAR, TOTALREVENUE DESC;




-- 6




SELECT 
    c.CATEGORIENOME, 
    SUM(s.QUANTITY) AS TOTALQUANTITY
FROM 
    SALES s
JOIN 
    PRODUCTS p ON s.PRODUCT_ID = p.PRODUCT_ID
JOIN 
    CATEGORIE c ON p.CATEGORIE_ID = c.CATEGORIE_ID
GROUP BY 
    c.CATEGORIENOME
ORDER BY 
    TOTALQUANTITY DESC
LIMIT 1;


-- 7


SELECT 
    p.PRODUCT_ID, 
    p.PRODUCT_NAME
FROM 
    PRODUCTS p
LEFT JOIN SALES s ON p.PRODUCT_ID = s.PRODUCT_ID
WHERE 
    s.PRODUCT_ID IS NULL;

-- SECONDO APPROCCIO


SELECT 
    p.PRODUCT_ID, 
    p.PRODUCT_NAME
FROM 
    PRODUCTS p
WHERE 
    NOT EXISTS (
        SELECT 1 FROM SALES s WHERE s.PRODUCT_ID = p.PRODUCT_ID
    );
    




-- 8

CREATE VIEW PRODUCT_VIEW AS
SELECT 
    p.PRODUCT_ID,
    p.PRODUCT_NAME,
    c.CATEGORIENOME
FROM 
    PRODUCTS p
JOIN CATEGORIE c ON p.CATEGORIE_ID = c.CATEGORIE_ID;




-- 9 


CREATE VIEW GEOGRAPHY_VIEW AS
SELECT 
    st.COUNTRY_ID,
    st.COUNTRY_NAME,
    r.REGION_NAME
FROM 
    COUNTRIES st
JOIN REGIONS r ON st.REGION_ID = r.REGION_ID;

